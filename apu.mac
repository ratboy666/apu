; APU.MAC
;
; FORTRAN-80 INTERFACE FOR AM9511
;
; LINK BEFORE FORLIB.REL
;
; THIS CODE IS DESIGNED FOR USE WITH THE 8080 AND THE AM9511A CHIP. WE
; ATTEMPT TO OPTIMIZE THIS FOR SPEED ON THE 8080.
;
         EXTRN    ST9511,DA9511
         EXTRN    $AC,$ERR
;
;
         CSEG
         .8080
;
;
; AM9511 DEFINITIONS ==================================================
;       
AM.SR    EQU      80H                   ; SERVICE REQUEST
AM.SINGL EQU      60H                   ; 16 BIT INTEGER
AM.DOUBL EQU      20H                   ; 32 BIT INTEGER
AM.FIXED EQU      20H                   ; FIXED POINT
AM.FLOAT EQU      00H                   ; 32 BIT FLOAT
;       
AM.NOP   EQU      00H                   ; NO OPERATION
AM.SQRT  EQU      01H                   ; SQUARE ROOT
AM.SIN   EQU      02H                   ; SINE
AM.COS   EQU      03H                   ; COSINE
AM.TAN   EQU      04H                   ; TANGENT
AM.ASIN  EQU      05H                   ; INVERSE SINE
AM.ACOS  EQU      06H                   ; INVERSE COSINE
AM.ATAN  EQU      07H                   ; INVERSE TANGENT
AM.LOG   EQU      08H                   ; COMMON LOG (BASE 10)
AM.LN    EQU      09H                   ; NATURAL LOG (BASE E)
AM.EXP   EQU      0AH                   ; EXPONENTIAL (E^X)
AM.PWR   EQU      0BH                   ; POWER NOS^TOS
AM.ADD   EQU      0CH                   ; ADD
AM.SUB   EQU      0DH                   ; SUBTRACT (NOS-TOS)
AM.MUL   EQU      0EH                   ; MULTIPLY, LOWER HALF
AM.DIV   EQU      0FH                   ; DIVIDE (NOS/TOS)
AM.FADD  EQU      10H                   ; FLOATING ADD
AM.FSUB  EQU      11H                   ; FLOATING SUBTRACT
AM.FMUL  EQU      12H                   ; FLOATING MULTIPLY
AM.FDIV  EQU      13H                   ; FLOATING DIVIDE
AM.CHS   EQU      14H                   ; CHANGE SIGN
AM.CHSF  EQU      15H                   ; FLOATING CHANGE SIGN
AM.MUU   EQU      16H                   ; MULTIPLY, UPPER HALF
AM.PTO   EQU      17H                   ; PUSH TOS TO NOS (COPY)
AM.POP   EQU      18H                   ; POP
AM.XCH   EQU      19H                   ; EXCHANGE TOS AND NOS
AM.PUPI  EQU      1AH                   ; PUSH PI
AM.FLTD  EQU      1CH                   ; 32 BIT TO FLOAT
AM.FLTS  EQU      1DH                   ; 16 BIT TO FLOAT
AM.FIXD  EQU      1EH                   ; FLOAT TO 32 BIT
AM.FIXS  EQU      1FH                   ; FLOAT TO 16 BIT
;       
AM.BUSY  EQU      80H                   ; CHIP IS BUSY
AM.SIGN  EQU      40H                   ; TOS NEGATIVE
AM.ZERO  EQU      20H                   ; TOS ZERO
AM.ERRM  EQU      1EH                   ; MASK FOR ERRORS
AM.CARRY EQU      01H                   ; CARRY/BORROW
;
AM.ENON  EQU      00H                   ; NO ERROR
AM.EDIV0 EQU      10H                   ; DIVIDE BY ZERO
AM.ENEG  EQU      08H                   ; SQRT, LOG OF NEGATIVE
AM.EARG  EQU      18H                   ; ARG ASIN, COS, E^X TOO LARGE
AM.EUND  EQU      04H                   ; UNDERFLOW
AM.EOVF  EQU      02H                   ; OVERFLOW
;
;
; FORTRAN-80 $ERR DEFINITIONS =========================================
;
; THESE ERRORS ARE IN A TABLE WITHIN FORLIB. CALL $ERR IS FOLLOWED
; BY A BYTE WITH THE INDEX IN THE TABLE OF THE ERROR (21H IS THE
; LIMIT, AFTER WHICH ?? IS USED). IF THE HIGH BIT OF THE BYTE IS
; SET, THE ERROR IS FATAL; OTHERWISE UP TO 20 ERRORS ARE ALLOWED
; BEFORE TERMINATION.
;
; OUR USE OF THESE ERRORS IS: DZ = DIVIDE BY ZERO, OV = OVERFLOW
; CN = CONVERSION (REAL TO INTEGER, OR REAL TO AM9511).
; UN = ALL OTHER ERRORS (THINK 'UNKNOWN', MOSTLY UNDERFLOW, IF
; ENABLED).
;
; UNDERFLOW CONDITIONS GO TO ZERO. OVERFLOW GOES TO THE LARGEST
; NUMBER THAT CAN BE EXPRESSED BY THE AM9511. NOTE THAT THE BASIC
; ARITHMETIC FUNCTIONS DO RETURN ADJUSTED EXPONENT AND CORRECT
; MANTISSA ON THE AM9511, BUT THERE IS NO WAY TO USE THAT WITH
; 'NORMAL' FORTRAN PROGRAMS, SO WE SIMPLY ZERO OR CLAMP THE RESULT.
; 
E.FATAL  EQU      80H                   ; ERROR IS FATAL
E.DZ     EQU      9                     ; DZ ERROR (DIVIDE BY 0)
E.OV     EQU      19                    ; OVERFLOW
E.CN     EQU      20                    ; REAL CONVERSION
E.UN     EQU      32                    ; UN ERROR
;
;
; WAIT FOR APU ========================================================
;
WAIT     MACRO
         LOCAL    T
T:       IN       ST9511
         RLC
         JC       T
         ENDM
;
;
; SIGN EXTEND =========================================================
;
SEX      MACRO
         RAL
         SBB      A
         ENDM
;
;
; LOAD REAL ===========================================================
;
; LOAD REAL FROM [HL] TO AM9511
;
LOADR:   PUSH     B
         PUSH     H
         INX      H
         INX      H
         MOV      A,M                   ; MANTISAA HIGH BYTE
         ANI      80H                   ; ISOLATE SIGN
         MOV      B,A
         INX      H
         MOV      A,M                   ; EXPONENT
         ORA      A
         JZ       LOADR1
         CPI      80H+63
         JNC      LOADR2
         CPI      80H-64
         JC       LOADR3
         SUI      80H
         ANI      7FH
         ORA      B                     ; PUSH IN SIGN
         MOV      B,A
         POP      H
         MOV      A,M
         OUT      DA9511
         INX      H
         MOV      A,M
         OUT      DA9511
         INX      H
         MOV      A,M
         ORI      80H                   ; EXPLICIT NORMALIZATION BIT
         OUT      DA9511
         MOV      A,B
         OUT      DA9511
         POP      B
         RET
LOADR3:  CALL     $ERR                  ; UNDERFLOW (CN)
         DB       E.CN
LOADR1:  POP      H
         XRA      A                     ; LOAD A ZERO
         OUT      DA9511
         OUT      DA9511
         OUT      DA9511
         OUT      DA9511
         POP      B
         RET
LOADR2:  CALL     $ERR                  ; OVERFLOW (CN)
         DB       E.CN
         POP      H
         MVI      A,0FFH                ; LARGEST NUMBER
         OUT      DA9511
         OUT      DA9511
         OUT      DA9511
         MVI      A,3FH
         ORA      B
         OUT      DA9511
         POP      B
         RET
;
;
; STORE REAL ==========================================================
;
; STORE REAL FROM AM9511 TO [HL].
;
; BECAUSE AN OPERATION THAT SETS THE AM9511 STATUS MAY NOT HAVE BEEN
; PERFORMED, DETERMINE ZERO BY LOOKING AT BIT 23.
;
STORR:   PUSH     B
         IN       DA9511                ; 9511 EXPONENT
         MOV      B,A
         IN       DA9511                ; 9511 HIGH MANTISSA
         MOV      C,A
         INX      H                     ; HL=MIDDLE MANTISSA
         IN       DA9511                ; 9511 MIDDLE MANTISSA
         MOV      M,A
         DCX      H                     ; HL=LOW MANTISSA
         IN       DA9511                ; 9511 LOW MANTISSA
         MOV      M,A
         MOV      A,C
         ANI      80H
         JZ       STORR1                ; B23=0, ZERO
         INX      H                     ; HL=MIDDLE MANTISSA
         INX      H                     ; HL=HIGH MANTISSA
         MOV      A,C                   ; STRIP EXPLICIT 1
         ANI      7FH
         MOV      C,A
         MOV      A,B                   ; GET SIGN
         ANI      80H
         ORA      C                     ; OR IN SIGN
         MOV      M,A
         INX      H                     ; HL=EXPONENT
         MOV      A,B                   ; STRIP SIGN BIT
         ANI      7FH
         MOV      B,A
         ANI      40H                   ; EXPONENT < 0?
         MOV      A,B
         JZ       STORR2
         ORI      0C0H                  ; YES, SIGN EXTEND
STORR2:  ADI      80H                   ; BIAS BY 128
         MOV      M,A                   ; AND STORE
         POP      B
         RET
STORR1:  POP      B                     ; ZERO
         XRA      A
         MOV      M,A                   ; (HL=LOW MANTISSA)
         INX      H
         MOV      M,A
         INX      H
         MOV      M,A
         INX      H
         MOV      M,A
         RET
;
;
; REAL / INTEGER*4 =====================================================
;
$DE:     MVI      A,AM.FDIV
;;       JMP      ROPL
;
;
; REAL OP INTEGER*4 ====================================================
;
ROPL:    PUSH     P
         XCHG
         LXI      H,$AC
         CALL     LOADR
         LDAX     D
         OUT      DA9511
         INX      D
         LDAX     D
         OUT      DA9511
         INX      D
         LDAX     D
         OUT      DA9511
         INX      D
         LDAX     D
         OUT      DA9511
         MVI      A,AM.FLTD
         OUT      ST9511
         WAIT
         JMP      ROPRX
;
;
; REAL + INTEGER*4 =====================================================
;
$AE:     MVI      A,AM.FADD
         JMP      ROPL
;
;
; REAL - INTEGER*4 =====================================================
;
$SE:     MVI      A,AM.FSUB
         JMP      ROPL
;
;
; REAL * INTEGER*4 =====================================================
;
$ME:     MVI      A,AM.FMUL
         JMP      ROPL
;
; REAL / INTEGER =======================================================
;
         PUBLIC   $DA
;
$DA:     MVI      A,AM.FDIV
;;       JMP      ROPI
;
;
; REAL OP INTEGER =====================================================
;
ROPI:    PUSH     P
         XCHG
         LXI      H,$AC
         CALL     LOADR
         MOV      A,E
         OUT      DA9511
         MOV      A,D
         OUT      DA9511
         MVI      A,AM.FLTS
         OUT      ST9511
         WAIT
         JMP      ROPRX
;
;
; REAL + INTEGER =======================================================
;
         PUBLIC   $AA
;
$AA:     MVI      A,AM.FADD
         JMP      ROPI
;
;
; REAL - INTEGER =======================================================
;
         PUBLIC   $SA
;
$SA:     MVI      A,AM.FSUB
         JMP      ROPI
;
;
; REAL * INTEGER =======================================================
;
         PUBLIC   $MA
;
$MA:     MVI      A,AM.FMUL
         JMP      ROPI
;
;
; REAL / REAL ==========================================================
;
         PUBLIC   $DB
;
$DB:     MVI      A,AM.FDIV
;;       JMP      ROPR
;
;
; REAL OP REAL =========================================================
;
; $AC OP [HL] -> $AC
;
ROPR:    PUSH     P
         XCHG
         LXI      H,$AC
         CALL     LOADR
         XCHG
         CALL     LOADR
ROPRX:   POP      P
         OUT      ST9511
         WAIT
         LXI      H,$AC
         CALL     STORR
         IN       ST9511
         MOV      L,A
         ANI      AM.EDIV0
         JNZ      ROPR4
         MOV      L,A
         ANI      AM.EOVF
         MOV      A,L
         JNZ      ROPR3
         ANI      AM.EUND
         JNZ      ROPR1
         MOV      A,L
         ANI      AM.ZERO
         JNZ      ROPR2
         MOV      A,L
         ANI      AM.ERRM
         JNZ      ROPR5
         MOV      A,L
         RAL
         ANI      80H
         ORI      1
         RET
ROPR1:   ;;CALL     $ERR
         ;;DB       E.UN
ROPR2:   XRA      A
         MOV      H,A
         MOV      L,A
         SHLD     $AC
         SHLD     $AC+2
         RET
ROPR3:   LXI      H,0FFFFH
         SHLD     $AC
         RAL
         ANI      80H
         ORI      7FH
         MOV      L,A
         MVI      H,3FH
         SHLD     $AC
         CALL     $ERR
         DB       E.OV
         RET
ROPR4:   CALL     $ERR
         DB       E.DZ+E.FATAL
ROPR5:   CALL     $ERR
         DB       E.UN+E.FATAL
;
;
; REAL - REAL ==========================================================
;
; $AC - [HL] -> $AC
;
         PUBLIC   $SB
;
$SB:     MVI      A,AM.FSUB
         JMP      ROPR
;
;
; REAL + REAL ==========================================================
;
; $AC + [HL] -> $AC
;
         PUBLIC   $AB
;
$AB:     MVI      A,AM.FADD
         JMP      ROPR
;
;
; REAL * REAL ==========================================================
;
; $AC * [HL] -> $AC
;
         PUBLIC   $MB
;
$MB:     MVI      A,AM.FMUL
         JMP      ROPR
;
;
; REAL ** REAL ========================================================
;
; $AC ** [HL] -> $AC
;
         PUBLIC   $EB
;
$EB:     MVI      A,AM.PWR
         JMP      ROPR
;
;
; INTEGER / INTEGER ===================================================
;
; DE / HL -> HL
;
         PUBLIC   $D9
;
$D9:     MOV      A,E
         OUT      DA9511
         MOV      A,D
         OUT      DA9511
         MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
         MVI      A,AM.DIV+AM.SINGL
         OUT      ST9511
         WAIT
         MOV      H,A
         ANI      AM.ERRM SHL 1
         JNZ      $D9.3
         MOV      A,H
         ANI      AM.ZERO SHL 1
         JZ       $D9.2
;
         XRA      A
         MOV      H,A
         MOV      L,A
         RET
;
$D9.2:   IN       DA9511
         MOV      H,A
         IN       DA9511
         MOV      L,A
         MOV      A,H
         ORI      1
         RET
;
$D9.3:   CALL     $ERR
         DB       E.DZ+E.FATAL
;
;
; INTEGER*4 / INTEGER =================================================
;
; $AC / HL -> $AC
;
         PUBLIC   $DY
;
$DY:     PUSH     H
         LHLD     $AC
         MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
         LHLD     $AC+2
         MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
;
         POP      H
         MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
         SEX
         OUT      DA9511
         OUT      DA9511
;
         MVI      A,AM.DIV+AM.DOUBL
         OUT      ST9511
         WAIT
         MOV      H,A
         ANI      AM.ERRM SHL 1
         JNZ      $DY.3
         MOV      A,H
         ANI      AM.ZERO SHL 1
         JZ       $DY.2
;
         XRA      A
         MOV      H,A
         MOV      L,A
         SHLD     $AC
         SHLD     $AC+2
         RET
;
$DY.2:   IN       DA9511
         MOV      H,A
         IN       DA9511
         MOV      L,A
         SHLD     $AC+2
         IN       DA9511
         MOV      H,A
         IN       DA9511
         MOV      L,A
         SHLD     $AC
         MOV      A,H
         ORI      1
         RET
;
$DY.3:   CALL     $ERR
         DB       E.DZ+E.FATAL
;
;
; INTEGER*4 / INTEGER*4  ==============================================
;
; $AC / [HL] -> $AC
;
         PUBLIC   $D1
;
$D1:     PUSH     H
         LHLD     $AC
         MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
         LHLD     $AC+2
         MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
;
         POP      H
         MOV      A,M
         OUT      DA9511
         INX      H
         MOV      A,M
         OUT      DA9511
         INX      H
         MOV      A,M
         OUT      DA9511
         INX      H
         MOV      A,M
         OUT      DA9511
;
         MVI      A,AM.DIV+AM.DOUBL
         OUT      ST9511
         WAIT
         MOV      H,A
         ANI      AM.ERRM SHL 1
         JNZ      $D1.3
         MOV      A,H
         ANI      AM.ZERO SHL 1
         JZ       $D1.2
;
         XRA      A
         MOV      H,A
         MOV      L,A
         SHLD     $AC
         SHLD     $AC+2
         RET
;
$D1.2:   IN       DA9511
         MOV      H,A
         IN       DA9511
         MOV      L,A
         SHLD     $AC+2
         IN       DA9511
         MOV      H,A
         IN       DA9511
         MOV      L,A
         SHLD     $AC
         MOV      A,H
         ORI      1
         RET
;
$D1.3:   CALL     $ERR
         DB       E.DZ+E.FATAL
;
;
; INTEGER * INTEGER ===================================================
;
; HL * DE -> HL
;
         PUBLIC   $M9
;
$M9:     MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
;
         MOV      A,E
         OUT      DA9511
         MOV      A,D
         OUT      DA9511
;
         MVI      A,AM.MUL+AM.SINGL
         OUT      ST9511
         WAIT
         ANI      AM.ZERO SHL 1
         JZ       $M9.2
;
         XRA      A                     ; Z FLAG
         MOV      H,A                   ; RESULT 0
         MOV      L,A
         RET
;
$M9.2:   IN       DA9511
         MOV      H,A
         IN       DA9511
         MOV      L,A
         MOV      A,H                   ; S FLAG
         ORI      1
         RET
;
;
; INTEGER*4 * INTEGER =================================================
;
; $AC * HL -> $AC
;
         PUBLIC   $MY
;
$MY:     MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
         SEX
         OUT      DA9511
         OUT      DA9511
;
         LHLD     $AC
         MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
         LHLD     $AC+2
         MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
;
         MVI      A,AM.MUL+AM.DOUBL
         OUT      ST9511
         WAIT
         ANI      AM.ZERO SHL 1
         JZ       $MY.2
;
         XRA      A
         MOV      H,A
         MOV      L,A
         SHLD     $AC
         SHLD     $AC+2
         RET
;
$MY.2:   IN       DA9511
         MOV      H,A
         IN       DA9511
         MOV      L,A
         SHLD     $AC+2
         IN       DA9511
         MOV      H,A
         IN       DA9511
         MOV      L,A
         SHLD     $AC
         MOV      A,H
         ORI      1
         RET
;
;
; INTEGER*4 * INTEGER*4 ===============================================
;
; $AC * [HL] -> $AC
;
         PUBLIC   $M1
;
$M1:     MOV      A,M
         OUT      DA9511
         INX      H
         MOV      A,M
         OUT      DA9511
         INX      H
         MOV      A,M
         OUT      DA9511
         INX      H
         MOV      A,M
         OUT      DA9511
;
         LHLD     $AC
         MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
         LHLD     $AC+2
         MOV      A,L
         OUT      DA9511
         MOV      A,H
         OUT      DA9511
;
         MVI      A,AM.MUL+AM.DOUBL
         OUT      ST9511
         WAIT
         ANI      AM.ZERO SHL 1
         JZ       $M1.2
;
         XRA      A
         MOV      H,A
         MOV      L,A
         SHLD     $AC
         SHLD     $AC+2
         RET
;
$M1.2:   IN       DA9511
         MOV      H,A
         IN       DA9511
         MOV      L,A
         SHLD     $AC+2
         IN       DA9511
         MOV      H,A
         IN       DA9511
         MOV      L,A
         SHLD     $AC
         MOV      A,H
         ORI      1                     ; Z CLEAR, SET SIGN
         RET
;
;
; EXP =================================================================
;
         PUBLIC   EXP
;
EXP:     MVI      A,AM.EXP
;;       JMP      FUNC
;
;
; FUNC(X) =============================================================
;
; FUNC([HL]) -> $AC
;
FUNC:    PUSH     P
         CALL     LOADR
         JMP      ROPRX
;
;
; ALOG ================================================================
;
         PUBLIC   ALOG
;
ALOG:    MVI      A,AM.LN
         JMP      FUNC
;
;
; ALOG10 ==============================================================
;
         PUBLIC   ALOG10
;
ALOG10:  MVI      A,AM.LOG
         JMP      FUNC
;
;
; SIN =================================================================
;
         PUBLIC   SIN
;
SIN:     MVI      A,AM.SIN
         JMP      FUNC
;
;
; COS =================================================================
;
         PUBLIC   COS
;
COS:     MVI      A,AM.COS
         JMP      FUNC
;
;
; SQRT ================================================================
;
         PUBLIC   SQRT
;
SQRT:    MVI      A,AM.SQRT
         JMP      FUNC
;
;
; ATAN ================================================================
;
         PUBLIC   ATAN
;
ATAN:    MVI      A,AM.ATAN
         JMP      FUNC
;
;
         END
                                                                                                      