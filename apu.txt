apu.txt

APU is a module for MicroSoft FORTRAN-80. It provides AM9511
support for INTEGER and INTEGER*4 multiply and divide, and REAL
arithmetic. DOUBLE PRECISION is not accelerated.

We leave intrinsic functions to another library. The standard
intrinsic functions should work faster, simply because they
will use the new arithmetic routines. At a later time, we can
add some of the intrinsics.

There were four or more implementations of this "back in the day".
In 1980 or so, we had the Memtech, Redding, Lutowski and Video
Vector Dynamics libraries(that I am aware of) to support the AM9511
APU with MicroSoft FORTRAN-80. None of these implementations appear
available. APU is designed to fill this void.


Supported APU Functions:

As APU functions are completed, they will be added to this
table.

    INTEGER, INTEGER*4
        $D9 INTEGER   /  INTEGER
        $DY INTEGER*4 /  INTEGER
        $D1 INTEGER*4 /  INTEGER*4
        $M9 INTEGER   *  INTEGER
        $M1 INTEGER*4 *  INTEGER*4
        $MY INTEGER*4 *  INTEGER
    REAL
        $SB REAL      -  REAL
        $AB REAL      +  REAL
        $MB REAL      *  REAL
        $DB REAL      /  REAL
        $EB REAL      ** REAL
    INTRINSIC
        NONE

TODO

Note that integer add and subtract are (probably) not worth
implementing. It takes longer to send a byte to the APU than
it does to perform an ADD or ADC instruction. Therefore, there
is no point at which stand-alone integer add or subtract using
the AM9511 will improve performance. Note that if the data is
already on-chip, this may change the analysis. However, this
is not possible with simple library override.

The same reasoning is involved with most conversion functions.
For example $CA is INTEGER to REAL. We could use the AM9511
FLTS instruction, but need to load the integer to the chip,
and then convert AM9511 to Microsoft REAL. This will not be
much faster -- and may even be slower.

However, mixed operations (REAL, INTEGER and REAL INTEGER*4)
can benefit as the AM9511 can be loaded, FLTS or FLTD, and
then the operation performed.

We want to add in overflow detection to multiply.

The integer functions need to be as fast as possible to provide
any benefit at all.


Compiling and Linking with APU

APU selectively replaces functions in FORLIB. This is done
by specifying APU before FORLIB. TEST.FOR is an example.

AM9511.MAC must be edited to reflect the actual ports used
by the AM9511 device.

-- compile fortran test, generate a listing
F80 =TEST/L

-- assemble am9511 to define ports
M80 =AM9511/L

-- assemble apu
M80 =APU/L

-- link, producing result.com and result.sym
L80 TEST,AM9511,APU,RESULT/N/Y/E

We will get multiply defined symbols when linking.

For example:

%Mult. Def. Global $D1
%Mult. Def. Global $DY
%Mult. Def. Global $M1
%Mult. Def. Global $MY
%Mult. Def. Global $D9

These can be ignored. The cause of these is in FORLIB. For example,
$DY is defined in the INT4 module. There are other routines in INT4
that we need to link in. This brings in the complete INT4 module,
which then conflicts with APUs definition of $DY. Because the APU
definition was linked first, it is used (which is what we want).
Thus the

%Mult. Def. Global $DY

can be taken as a warning. L80 does produce the correct COM file.

Please note that the INT4 version of $DY is actually in the object
code output but it is not accessible. Therefore, in general,
linking with APU provides speed, but does not reduce the COM
file size.

